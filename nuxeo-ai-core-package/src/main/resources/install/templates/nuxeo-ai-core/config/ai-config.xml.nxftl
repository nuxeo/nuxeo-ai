<?xml version="1.0"?>
<component name="org.nuxeo.ai.config" version="1.0">
    <require>org.nuxeo.ai.services.AIComponent</require>
<#if "${nuxeo.enrichment.save.tags}" == "true">
  <extension target="org.nuxeo.runtime.stream.service" point="streamProcessor">
    <streamProcessor name="tagsProcessor" defaultConcurrency="2" defaultPartitions="4"
                     logConfig="${nuxeo.ai.stream.config.name}"
                     class="org.nuxeo.ai.functions.StoreLabelsAsTags">
      <policy name="default" maxRetries="5" delay="200ms" maxDelay="2s" continueOnFailure="true" />
      <option name="source">${nuxeo.enrichment.source.stream}</option>
    </streamProcessor>
  </extension>
</#if>

<#if "${nuxeo.enrichment.save.facets}" == "true">
  <extension target="org.nuxeo.runtime.stream.service" point="streamProcessor">
    <streamProcessor name="saveMetadataProcessor" defaultConcurrency="2" defaultPartitions="4"
                     logConfig="${nuxeo.ai.stream.config.name}"
                     class="org.nuxeo.ai.functions.SaveEnrichmentFunction">
      <policy name="default" maxRetries="5" delay="200ms" maxDelay="2s" continueOnFailure="true" />
      <option name="source">${nuxeo.enrichment.source.stream}</option>
    </streamProcessor>
  </extension>

</#if>

<#if "${nuxeo.enrichment.raiseEvent}" == "true">
  <extension target="org.nuxeo.runtime.stream.service" point="streamProcessor">
    <streamProcessor name="raiseEventProcessor" defaultConcurrency="2" defaultPartitions="4"
                     logConfig="${nuxeo.ai.stream.config.name}"
                     class="org.nuxeo.ai.functions.RaiseEnrichmentEvent">
      <policy name="default" maxRetries="5" delay="200ms" maxDelay="2s" continueOnFailure="true" />
      <option name="source">${nuxeo.enrichment.source.stream}</option>
    </streamProcessor>
  </extension>
</#if>

<#if "${nuxeo.ai.export.tensorflow}" == "true">
  <extension point="recordWriter" target="org.nuxeo.ai.services.AIComponent">
    <recordWriter class="org.nuxeo.ai.tensorflow.TFRecordWriter">
      <name>training</name>
      <name>validation</name>
      <option name="blobProvider">default</option>
    </recordWriter>
  </extension>
</#if>

<#if "${nuxeo.ai.insight.client.enable}" == "true">
    <extension target="org.nuxeo.ecm.core.scheduler.SchedulerService" point="schedule">
        <schedule id="continuous_export_default">
            <event>startContinuousExport</event>
            <cronExpression>${nuxeo.ai.continuous.export.cron.interval}</cronExpression>
        </schedule>
    </extension>

    <extension target="org.nuxeo.ecm.core.scheduler.SchedulerService" point="schedule">
        <schedule id="model_serving_update">
            <event>invalidateModelDefinitions</event>
            <cronExpression>${nuxeo.ai.model.serving.cron.update.interval}</cronExpression>
        </schedule>
    </extension>
</#if>
</component>
