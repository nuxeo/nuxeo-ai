# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  workflow_call:
    inputs:
      aws-account:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: us-east-1
      should-push:
        required: false
        type: boolean
        default: false
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      packages-auth-user:
        required: true
      packages-auth-token:
        required: true
      connect-auth-user:
        required: true
      connect-auth-token:
        required: true
      google-creds:
        required: true

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: "-Xms1g -Xmx1536m"
    outputs:
      version: ${{ steps.project.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - name: 'Set java version'
      id: java-version
      run: |
        if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
          echo "java-version=11" >> $GITHUB_OUTPUT
        elif [[ "${{github.base_ref}}" == "master-10.10" || "${{github.ref}}" == "refs/heads/master-10.10" ]]; then
            echo "java-version=8" >> $GITHUB_OUTPUT
        else
              echo "java-version=17" >> $GITHUB_OUTPUT
        fi
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version:  ${{ steps.java-version.outputs.java-version }}
        distribution: "zulu"
        cache: maven
    - name: "Install dependencies"
      run: |
        sudo apt-get -y update && sudo apt-get install -y --no-install-recommends \
          perl \
          locales \
          pwgen \
          imagemagick \
          poppler-utils \
          libwpd-tools \
          exiftool \
          ghostscript \
          ffmpeg \
          x264
    - name: "Update settings.xml with server configuration"
      run: |
        echo '<settings>
            <servers>
              <server>
                <id>maven-internal</id>
                <username>${{ secrets.packages-auth-user }}</username>
                <password>${{ secrets.packages-auth-token }}</password>
              </server>
              <server>
                <id>maven-team-platform-private</id>
                <username>${{ secrets.packages-auth-user }}</username>
                <password>${{ secrets.packages-auth-token }}</password>
              </server>
              <server>
                <id>maven-private</id>
                <username>${{ secrets.packages-auth-user }}</username>
                <password>${{ secrets.packages-auth-token }}</password>
              </server>
              <server>
                <id>maven-public-snapshots</id>
                <username>${{ secrets.packages-auth-user }}</username>
                <password>${{ secrets.packages-auth-token }}</password>
              </server>
              <server>
                <id>maven-public-releases</id>
                <username>${{ secrets.packages-auth-user }}</username>
                <password>${{ secrets.packages-auth-token }}</password>
              </server>
              <server>
                <id>nuxeo-studio</id>
                <username>${{ secrets.connect-auth-user }}</username>
                <password>${{ secrets.connect-auth-token }}</password>
              </server>
            </servers>
            </settings>' > ~/.m2/settings.xml
    - name: Build with Maven
      run: mvn install -fae -B -T0.8C -DskipTests
    - name: Run Tests with Maven
      run: mvn install --fail-never -nsu -B -Dnuxeo.test.elasticsearch.addressList=http://localhost:9200
    - name: Publish Test Report
      if: ${{ always() }}
      uses: scacap/action-surefire-report@v1
    - name: Publish with Maven
      if: ${{ inputs.should-push }}
      run:
        mvn deploy -DskipTests
    - name: Get project version
      run: echo "VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | xargs echo -n)" >> $GITHUB_ENV
    - run: ls -alR | grep ".*package.*.zip"
    - run: ls -alR | grep ".*nuxeo-ai-core-.*.zip"
    - name: Upload packages build artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuxeo-ai-github-packages-build
        path: |
          ./**/target/**/*package*.zip
          ./nuxeo-ai-core-package/target/nuxeo-ai-core-${{ env.VERSION }}.zip
    - name: Publish packages to Production Connect Marketplace
      if: ${{ inputs.should-push }}
      env:
        CONNECT_URL: https://connect.nuxeo.com/nuxeo
      run: |
        packages=('nuxeo-ai-core-package/target/nuxeo-ai-core-' 
                  'addons/nuxeo-ai-aws-package/target/nuxeo-ai-aws-package-' 
                  'addons/nuxeo-ai-gcp-package/target/nuxeo-ai-gcp-package-' 
                  'addons/nuxeo-ai-image-quality-package/target/nuxeo-ai-image-quality-package-')
        
        for pkg in "${packages[@]}"; do
          PACKAGE=${pkg}${{ env.VERSION }}.zip
          curl -i -u "${{ secrets.connect-auth-user }}:${{ secrets.connect-auth-token }}" -F package=@$PACKAGE "$CONNECT_URL/site/marketplace/upload?batch=true"
        done
  

  notify-on-error:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ failure() && inputs.should-push }}
    steps:
    - name: Slack Notification
      id: slack
      uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844
      with:
        channel-id: "C9W4P9RKM"
        slack-message: "Nuxeo AI Core ${{ github.workflow }} workflow failed!\n${{ github.event.head_commit.url }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATION_BOT_TOKEN }}
